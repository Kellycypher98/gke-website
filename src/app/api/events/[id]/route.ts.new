import { NextResponse } from 'next/server'
import { eventsClient } from '@/lib/supabase/events-client'

type EventWithTiers = Awaited<ReturnType<typeof eventsClient.getEventById>>

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const event = await eventsClient.getEventById(params.id)
    if (!event) {
      return NextResponse.json(
        { error: 'Event not found' },
        { status: 404 }
      )
    }
    return NextResponse.json({
      ...event,
      ticketTiers: (event.ticket_tiers || []).filter(tier => tier.available)
    })
  } catch (error) {
    console.error('Error fetching event:', error)
    return NextResponse.json(
      { error: 'Failed to fetch event' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const updateData = await request.json()
    const existingEvent = await eventsClient.getEventById(params.id)
    if (!existingEvent) {
      return NextResponse.json(
        { error: 'Event not found' },
        { status: 404 }
      )
    }
    const updatedEvent = await eventsClient.updateEvent(params.id, {
      ...updateData,
      updated_at: new Date().toISOString(),
    })
    return NextResponse.json(updatedEvent)
  } catch (error) {
    console.error('Error updating event:', error)
    return NextResponse.json(
      { error: 'Failed to update event' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const existingEvent = await eventsClient.getEventById(params.id)
    if (!existingEvent) {
      return NextResponse.json(
        { error: 'Event not found' },
        { status: 404 }
      )
    }
    await eventsClient.deleteEvent(params.id)
    return new NextResponse(null, { status: 204 })
  } catch (error) {
    console.error('Error deleting event:', error)
    return NextResponse.json(
      { error: 'Failed to delete event' },
      { status: 500 }
    )
  }
}
